<?php

/**
 * @file
 * Creates a menu callback with support for displaying a node inside of
 * a colorbox.
 */

/*
 * Implments hook_init().
 */
function colorbox_node_init() {
  drupal_add_js(drupal_get_path('module', 'colorbox_node') .'/colorbox_node.js');
  //drupal_add_css(drupal_get_path('module', 'colorbox_node') .'/colorbox_node.css');
  // Setup a global to be used for our dynamic webform inclusion.
  $GLOBALS['colorbox_node_webform'] = FALSE;
  // We need to include our misc/ajax.js function all the time in case
  // we are loading up a webform in a colorbox window.
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'drupal.form');
  drupal_add_library('system', 'jquery.form');
  drupal_add_library('system', 'drupal.progress');
  drupal_add_library('system', 'drupal.textarea');
}

/*
 * Implements hook_menu().
 */
function colorbox_node_menu() {
  $items['colorbox/%colorbox_node_url'] = array(
    'page callback' => 'colorbox_node_output',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'load arguments' => array('%map'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
 * Displays a node view without the page template.
 * Takes the path as our argument and from that we
 * will determine the internal path and node id.
 */
function colorbox_node_output($path) {
  // @TODO, we should be able to use this for users too,
  // Lets beef this up and make it more intelligent around
  // the system path.

  // Retrieve our node id from the path.
  $nid = array_pop(explode('/', $path));
  // If we have a node, lets display it
  if ($node = node_load($nid, NULL, TRUE)) {
    // If this is a webform, lets modifiy it and add
    // ajax support to keep the webform inside the modal incase
    // of any error messages.
    if ($node->type == 'webform') {
      $GLOBALS['colorbox_node_webform'] = $nid;
    }

    // We need to fix our destination for contextual links.
    // This prevents a redirect to a screen with no styles.
    $_GET['destination'] = drupal_lookup_path('alias', 'node/'. $node->nid);

    // Render the node to a variable to pass on to our commands array.
    $html = drupal_render(node_view($node));

    // Use our ajax commands to return our page.
    $commands = array();
    $commands[] = ajax_command_html('#cboxNode', $html);
    // Lets add our javascript to fire a colorbox modal to insert
    // the markup from the #cboxNode container into colorbox.
    // @TODO:  Add support for providing a width and height through the URL.
    // @TODO:  Add colorbox module settings back into the colorbox call.
    
    // Setup our parameters to pass along to our colorbox.
    $params = array();
    $params['inline'] = TRUE;
    $params['href'] = '#cboxNode';
    if (isset($_GET['width'])) $params['innerWidth'] = $_GET['width'];
    if (isset($_GET['height'])) $params['innerHeight'] = $_GET['height'];

    $params = json_encode($params);

    $javascript = '
    <script type="text/javascript">
      (function ($) {
        $(document).ready(function() {
          var params = '. $params .';
          console.log(Drupal.settings.colorbox);
          $.fn.colorbox($.extend({}, Drupal.settings.colorbox, params));
        });
      })(jQuery);
    </script>';
    $commands[] = ajax_command_html('#cboxNodeJS', $javascript);
  }
  else {
    $html = '<h2>'. t('Page Not Found.') .'</h2>';
    $html .= t('The following page %path was not found.', array('%path' => $path));
    $commands = array();
    $commands[] = ajax_command_html('#cboxNode', $html);    
    // This isn't a node or the node failed to load.
    watchdog('colorbox_node', t('Failed to load a node while attempting to display it through a colorbox.<br />Node ID: '. $nid));
  }
  // Render our commands out to the browser.
  print ajax_render($commands);
  // Do our end of page tasks.  This is very important if using
  // the session for anonymous users.
  drupal_exit();
}

/*
 * Takes a path as an array of all our arguments from the
 * url structure.  We then put that structure back together,
 * find our system path and then return it.
 */
function colorbox_node_url_load($arg, $path = array()) {
  // First lets remove colorbox
  array_shift($path);

  // Lets determine if we have a prefix from our languages.
  if (module_exists('locale') && function_exists('language_url_split_prefix')) {
    // Get our language list to pass into our url splitter.
    $languages = language_list();
    // Turn the path into a string so we can then remove our prefix.
    $path_string = implode('/', $path);
    $language_path = language_url_split_prefix($path_string, $languages);
    // Separate out the returned path and language.  We should always
    // have two indexes, the first is the language, second is the path.
    $language = $language_path[0] ? $language_path[0]->language : '';
    $final_path = $language_path[1];
    // Lets find our path based on the current translation.
    return drupal_get_normal_path($final_path, $language);
  }
  // Now lets buld our path to return our system path,
  return drupal_get_normal_path(implode('/', $path));
}

/*
 * Implements hook_form_alter().
 */
function colorbox_node_form_alter(&$form, &$form_state, $form_id) {
  // Determine if our webform as been set for display inside a
  // colorbox modal window.
  if ($GLOBALS['colorbox_node_webform']) {
    $webform_id = 'webform_client_form_'. $GLOBALS['colorbox_node_webform'];
    // If we are altering our current webform to be displayed
    // inside a modal box, lets add ajax support.
    if ($form_id == $webform_id) {
      // Add our ajax support for this webform dynamically.
      $form['#prefix'] = '<div id="cboxNodeWrapper">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'colorbox_node_webform_js_submit',
        'wrapper' => 'cboxNodeWrapper',
        'method' => 'replace',
        'effect' => 'fade',
      );
    }
  }
}

/*
 * Javascript submit handler for our webform.
 */
function colorbox_node_webform_js_submit($form, &$form_state) {
  // If we have a failure or success, lets resize the modal box again since
  // it could grow/lose in height with the error/success messages.
  // @TODO:  Change the dynamic resizing only if the user wants it.
  $javascript = '
  <script type="text/javascript">
    (function ($) {
      $(document).ready(function() {
        setTimeout(function() {
          var h = $("#cboxNode").height() + 100;
          var w = $("#cboxWrapper").width();
          $.fn.colorbox.resize({width:w, height:h});
        }, 0);
      });
    })(jQuery);
  </script>';
  
  // We need a smarter dynamnic resize in case the user doesn't
  // want it to resize automatically.  Or if its a very large form
  // and it would extend past the page.
  $javascript = '';
  
  // If we have a sid, then the form has been successfully submitted.
  // Lets display our confirmation message.
  // @TODO:  Do we want to try and redirect to the URL as well?
  if ($form_state['values']['details']['sid']) {
    $node = node_load($form_state['values']['details']['nid']);
    $confirmation = array(
      '#type' => 'markup',
      '#markup' => check_markup($node->webform['confirmation'], $node->webform['confirmation_format'], '', TRUE) . $javascript,
    );
    return $confirmation;
  }
  else {
    $form['resize_colorbox'] = array(
      '#type' => 'markup',
      '#markup' => $javascript,
    );
    // We just pass through our $form
    return $form;
  }
}

/*
 * Implements hook_page_alter().
 */
function colorbox_node_page_alter(&$page) {
  $page['page_bottom']['cboxNode'] = array(
    '#type' => 'markup',
    '#markup' => '<div style="display:none"><div id="cboxNode"></div></div><div id="cboxNodeJS"></div>',
  );
} 